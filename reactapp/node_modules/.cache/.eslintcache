[{"/home/matteo/Desktop/GitHub/webAppOberon/reactapp/src/index.js":"1","/home/matteo/Desktop/GitHub/webAppOberon/reactapp/src/components/Header.jsx":"2","/home/matteo/Desktop/GitHub/webAppOberon/reactapp/src/components/DApp.jsx":"3","/home/matteo/Desktop/GitHub/webAppOberon/reactapp/src/components/RegisterSeller.jsx":"4","/home/matteo/Desktop/GitHub/webAppOberon/reactapp/src/components/NoWalletDetected.jsx":"5","/home/matteo/Desktop/GitHub/webAppOberon/reactapp/src/components/ConnectWallet.jsx":"6","/home/matteo/Desktop/GitHub/webAppOberon/reactapp/src/components/Buyer.jsx":"7","/home/matteo/Desktop/GitHub/webAppOberon/reactapp/src/components/Seller.jsx":"8","/home/matteo/Desktop/GitHub/webAppOberon/reactapp/src/components/Loading.jsx":"9","/home/matteo/Desktop/GitHub/webAppOberon/reactapp/src/components/Orders.jsx":"10"},{"size":841,"mtime":1644599339980,"results":"11","hashOfConfig":"12"},{"size":1001,"mtime":1644599339976,"results":"13","hashOfConfig":"12"},{"size":9091,"mtime":1644599340020,"results":"14","hashOfConfig":"12"},{"size":3689,"mtime":1644599339976,"results":"15","hashOfConfig":"12"},{"size":561,"mtime":1644599340020,"results":"16","hashOfConfig":"12"},{"size":339,"mtime":1644599340020,"results":"17","hashOfConfig":"12"},{"size":3497,"mtime":1644599339976,"results":"18","hashOfConfig":"12"},{"size":4348,"mtime":1644599339976,"results":"19","hashOfConfig":"12"},{"size":272,"mtime":1644599340020,"results":"20","hashOfConfig":"12"},{"size":1814,"mtime":1644599339976,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tc564q",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/matteo/Desktop/GitHub/webAppOberon/reactapp/src/index.js",[],"/home/matteo/Desktop/GitHub/webAppOberon/reactapp/src/components/Header.jsx",[],"/home/matteo/Desktop/GitHub/webAppOberon/reactapp/src/components/DApp.jsx",["43"],"import '../App.css';\nimport React from \"react\";\n\nimport { ethers } from \"ethers\";\n\nimport { NoWalletDetected } from \"./NoWalletDetected\";\nimport { ConnectWallet } from \"./ConnectWallet\";\nimport { Buyer } from './Buyer';\nimport { Seller } from './Seller';\nimport { Loading } from './Loading';\n\nimport Escrow from \"../contracts/escrow.json\";\n\nconst orderAmount = \"0.02\";\nconst ourNetwork = \"fuji\";\nconst selectedSeller = 0;\n\nconst networks = {\n    \"fuji\": {\n        chainId: \"0xa869\",\n        chainName: \"Avalanche Fuji Testnet\",\n        nativeCurrency: {\n            name: \"AVAX\",\n            symbol: \"AVAX\",\n            decimals: 18\n        },\n        rpcUrls: [\"https://api.avax-test.network/ext/bc/C/rpc\"],\n        blockExplorerUrls: [\"https://testnet.snowtrace.io/\"]\n    }\n};\n\nexport class DApp extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.initialState = {\n            currentAddress: undefined,\n            sellerAddress: undefined,\n            balance: undefined,\n            contractBalance: undefined,\n            contractAddress: \"0x1648471B1b56bd703de37216Aa298077628Dcf27\",\n            orders: undefined,\n            totalOrders: undefined,\n            getQRCode: undefined,\n            userIsBuyer: false,\n        };\n\n        this.state = this.initialState;\n    }\n\n    componentDidMount() {\n        this._setListenerMetamaksAccount();\n    }\n    \n    render() {\n        \n        if(window.ethereum === undefined) {\n            return <NoWalletDetected/>;\n        }\n        \n        if(!this.state.currentAddress) {\n            return (\n                <ConnectWallet connectWallet={() => this._connectWallet()}/>\n            );\n        }\n\n        if(!this.state.orders || !this.state.balance) {\n            return (\n                <Loading/>\n            );\n        }\n\n        if(this.state.userIsBuyer) {\n            return (\n                <Buyer  currentAddress={this.state.currentAddress}\n                        balance={this.state.balance}\n                        seller={this.state.sellerAddress}\n                        orders={this.state.orders}\n                        askRefund={(id) => this._askRefund(id)}\n                        createOrder={() => this._createOrder()}\n                        orderAmount={orderAmount}\n                        getQRCode={(id) => this._getQRCode(id)}\n                />\n            );\n        } else {\n            return (\n                <Seller currentAddress={this.state.currentAddress}\n                        balance={this.state.balance}\n                        contractBalance={this.state.contractBalance}\n                        orders={this.state.orders}\n                        deleteOrder={(id) => this._deleteOrder(id)}\n                        refundBuyer={(id, orderAmount) => this._refundBuyer(id, orderAmount)}\n                        totalOrders={this.state.totalOrders}\n                        getQRCode={(id) => this._getQRCode(id)}\n                />\n            );\n        }\n    };\n\n    async _setAddress() {\n        const [currentAddress] = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        this._initialize(currentAddress);\n    }\n\n    async _changeNetwork(networkName) {\n        try {\n            if (!window.ethereum) throw new Error(\"No crypto wallet found\");\n            await window.ethereum.request({\n                method: \"wallet_addEthereumChain\",\n                params: [\n                    {\n                        ...networks[networkName]\n                    }\n                ]\n            });\n            await this._setAddress();\n        } catch (err) {\n            console.log(err.message);\n        }\n    };\n\n    _setListenerMetamaksAccount() {\n        window.ethereum.on('accountsChanged', async () => {\n            this._connectWallet();\n        })\n    }\n\n    _setListenerMetamaksAccount() {\n        window.ethereum.on('accountsChanged', async () => {\n            this._connectWallet();\n        })\n    }\n    \n    async _connectWallet() {\n        window.ethereum.on('chainChanged', async (chainId) => {\n            if (chainId !== networks[ourNetwork].chainId) {\n                await this._changeNetwork(ourNetwork);\n            } else {\n                await this._setAddress();\n            }\n        });\n        if (window.ethereum.chainId !== ourNetwork) {\n            await this._changeNetwork(ourNetwork);\n        }\n        await this._setAddress();\n    }\n\n    _initialize(userAddress) {\n        this._initializeEthers();\n        this.setState({\n            currentAddress: userAddress,\n        });\n        this._initializeSeller();\n        this._getContractBalance();\n        this._getTotalOrders();\n        this._initializeOrders();\n        this._updateBalance();\n        this._removeQRCode();\n    }\n\n    async _initializeEthers() {\n        this._provider = new ethers.providers.Web3Provider(window.ethereum);\n    \n        this._contract = new ethers.Contract(\n          this.state.contractAddress,\n          Escrow.abi,\n          this._provider.getSigner(0)\n        );\n    }\n\n    async _initializeSeller() {\n        const sellerAddresses = await this._getSellers();\n        let sellerAddress = sellerAddresses[selectedSeller];\n        this.setState({ sellerAddress });\n        this._userIsBuyer();\n    }\n\n    async _updateBalance() {\n        const balanceInWei = await this._provider.getBalance(this.state.currentAddress, \"latest\");\n        const balanceInAvax = ethers.utils.formatEther(balanceInWei);\n        const balance = balanceInAvax.toString();\n        this.setState({ balance });\n    }\n\n    async _userIsBuyer() {\n        const userIsBuyer = this.state.currentAddress.toLowerCase() !== this.state.sellerAddress.toLowerCase();\n        this.setState({ userIsBuyer });\n    }\n\n    async _getSellers() {\n        const sellerAddresses = await this._contract.getSellers();\n        return sellerAddresses;\n    }\n\n    async _refreshInfo(tx) {\n        const receipt = await tx.wait();\n        if (receipt.status) {\n            this._initializeOrders();\n            this._updateBalance();\n        }\n    }\n\n    async _initializeOrders() {\n        let orders = [];\n        try {\n            orders = await this._contract.getOrdersOfUser(this.state.currentAddress);\n        } catch (error) {\n            console.log(error);\n        }\n        this.setState({ orders });\n    }\n    \n    async _createOrder() {\n        try {\n            const overrides = {\n                value: ethers.utils.parseEther(orderAmount),\n            }\n            const tx = await this._contract.createOrder(this.state.sellerAddress, overrides);\n            this._refreshInfo(tx);\n            const receipt = await tx.wait();\n            if (receipt.status) {\n                this._initializeOrders();\n                this._updateBalance();\n                this._getQRCode(-1);\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n    async _deleteOrder(id) {\n        try {\n            const tx = await this._contract.deleteOrder(id);\n            this._refreshInfo(tx);\n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n    async _askRefund(id) {\n        try {\n            const tx = await this._contract.askRefund(id);\n            this._refreshInfo(tx);\n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n    async _refundBuyer(id, orderAmount) {\n        try {\n            const overrides = {\n                value: orderAmount,\n            }\n            const tx = await this._contract.refundBuyer(id, overrides);\n            this._refreshInfo(tx);\n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n    async _getTotalOrders() {\n        var totalOrders = await this._contract.getTotalOrders();\n        totalOrders = totalOrders.toNumber();\n        this.setState({ totalOrders });\n    }\n\n    async _getContractBalance() {\n        var contractBalance = await this._contract.getBalance();\n        const contractBalanceInAvax = ethers.utils.formatEther(contractBalance);\n        contractBalance = contractBalanceInAvax.toString()+\" AVAX\";\n        this.setState({ contractBalance });\n    }\n\n    async _getQRCode(index) {\n        const orders = await this._contract.getOrdersOfUser(this.state.currentAddress);\n        const lastOrder = orders.at(parseInt(index));\n        const lastOrder_id = lastOrder.id;\n        const orderQRCode = \"localhost:3000/confirm-order?id=\"+lastOrder_id;\n        var QRCode = require('qrcode')\n        var canvas = document.getElementById('qrcode')\n        var opts = {\n            margin: 1,\n            color: {\n                dark:\"#131313\",\n                light:\"#e7e7e7\"\n            }\n        }\n        QRCode.toCanvas(canvas, orderQRCode, opts, function (error) {\n            if (error) console.error(error)\n        })\n    }\n\n    async _removeQRCode() {\n        let qrcode = document.getElementById('qrcode');\n        try {\n            var context = qrcode.getContext('2d');\n            context.clearRect(0, 0, qrcode.width, qrcode.height);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}","/home/matteo/Desktop/GitHub/webAppOberon/reactapp/src/components/RegisterSeller.jsx",["44"],"/home/matteo/Desktop/GitHub/webAppOberon/reactapp/src/components/NoWalletDetected.jsx",[],"/home/matteo/Desktop/GitHub/webAppOberon/reactapp/src/components/ConnectWallet.jsx",[],"/home/matteo/Desktop/GitHub/webAppOberon/reactapp/src/components/Buyer.jsx",["45","46"],"/home/matteo/Desktop/GitHub/webAppOberon/reactapp/src/components/Seller.jsx",["47","48"],"/home/matteo/Desktop/GitHub/webAppOberon/reactapp/src/components/Loading.jsx",[],"/home/matteo/Desktop/GitHub/webAppOberon/reactapp/src/components/Orders.jsx",["49","50"],{"ruleId":"51","severity":1,"message":"52","line":128,"column":5,"nodeType":"53","messageId":"54","endLine":132,"endColumn":6},{"ruleId":"55","severity":1,"message":"56","line":1,"column":17,"nodeType":"57","messageId":"58","endLine":1,"endColumn":26},{"ruleId":"59","severity":1,"message":"60","line":42,"column":49,"nodeType":"61","messageId":"54","endLine":42,"endColumn":51},{"ruleId":"59","severity":1,"message":"60","line":42,"column":83,"nodeType":"61","messageId":"54","endLine":42,"endColumn":85},{"ruleId":"59","severity":1,"message":"60","line":36,"column":49,"nodeType":"61","messageId":"54","endLine":36,"endColumn":51},{"ruleId":"59","severity":1,"message":"60","line":62,"column":47,"nodeType":"61","messageId":"54","endLine":62,"endColumn":49},{"ruleId":"59","severity":1,"message":"60","line":42,"column":32,"nodeType":"61","messageId":"54","endLine":42,"endColumn":34},{"ruleId":"59","severity":1,"message":"60","line":42,"column":66,"nodeType":"61","messageId":"54","endLine":42,"endColumn":68},"no-dupe-class-members","Duplicate name '_setListenerMetamaksAccount'.","MethodDefinition","unexpected","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression"]